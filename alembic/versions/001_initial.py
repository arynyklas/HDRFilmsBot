"""initial

Revision ID: 001
Revises: 
Create Date: 2025-03-10 14:46:41.772551

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '001'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('download_items_queue',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('item_id', sa.String(), nullable=False),
    sa.Column('item_title', sa.String(), nullable=False),
    sa.Column('translator_id', sa.String(), nullable=False),
    sa.Column('translator_title', sa.String(), nullable=False),
    sa.Column('translator_additional_arguments', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('is_film', sa.Boolean(), nullable=False),
    sa.Column('season_id', sa.String(), nullable=True),
    sa.Column('episode_id', sa.String(), nullable=True),
    sa.Column('user_tg_ids', sa.ARRAY(sa.BigInteger()), nullable=False),
    sa.Column('user_tg_message_ids', sa.ARRAY(sa.Integer()), nullable=False),
    sa.Column('user_tg_reply_message_ids', sa.ARRAY(sa.Integer()), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('downloaded_items',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('item_id', sa.String(), nullable=False),
    sa.Column('item_title', sa.String(), nullable=False),
    sa.Column('translator_id', sa.String(), nullable=False),
    sa.Column('translator_title', sa.String(), nullable=False),
    sa.Column('translator_additional_arguments', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('is_film', sa.Boolean(), nullable=False),
    sa.Column('season_id', sa.String(), nullable=True),
    sa.Column('episode_id', sa.String(), nullable=True),
    sa.Column('quality', sa.String(), nullable=False),
    sa.Column('video_file_id', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('track_series',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('item_id', sa.String(), nullable=False),
    sa.Column('item_title', sa.String(), nullable=False),
    sa.Column('translator_id', sa.String(), nullable=False),
    sa.Column('translator_title', sa.String(), nullable=False),
    sa.Column('translator_additional_arguments', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('user_tg_ids', sa.ARRAY(sa.BigInteger()), nullable=False),
    sa.Column('user_tg_message_ids', sa.ARRAY(sa.Integer()), nullable=False),
    sa.Column('last_season_id', sa.String(), nullable=True),
    sa.Column('last_episode_id', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('tg_id', sa.BigInteger(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_tg_id'), 'users', ['tg_id'], unique=True)
    op.create_table('payments',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('currency', sa.Enum('XTR', name='currencyenum'), nullable=False),
    sa.Column('purpose', sa.Enum('SUBSCRIPTION', name='paymentpurposeenum'), nullable=False),
    sa.Column('tg_charge_id', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payments_user_id'), 'payments', ['user_id'], unique=False)
    op.create_table('subscriptions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('payment_id', sa.Integer(), nullable=True),
    sa.Column('expiration_datetime', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_refunded', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['payment_id'], ['payments.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_subscriptions_payment_id'), 'subscriptions', ['payment_id'], unique=False)
    op.create_index(op.f('ix_subscriptions_user_id'), 'subscriptions', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_subscriptions_user_id'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_payment_id'), table_name='subscriptions')
    op.drop_table('subscriptions')
    op.drop_index(op.f('ix_payments_user_id'), table_name='payments')
    op.drop_table('payments')
    op.drop_index(op.f('ix_users_tg_id'), table_name='users')
    op.drop_table('users')
    op.drop_table('track_series')
    op.drop_table('downloaded_items')
    op.drop_table('download_items_queue')
    # ### end Alembic commands ###
